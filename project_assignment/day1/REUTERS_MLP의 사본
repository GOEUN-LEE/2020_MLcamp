{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"REUTERS_MLP","provenance":[{"file_id":"1yeVxKmw-yweBH-_WNO4SB42j2ubb-ggP","timestamp":1579573689660}],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"ImJXf2ksneL2","colab_type":"code","outputId":"4be847c4-1b31-4e0d-bd80-8b43000cfe8d","executionInfo":{"status":"ok","timestamp":1579657337720,"user_tz":-540,"elapsed":24402,"user":{"displayName":"이고은학부생","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mD7Hhpz51CZiAt-pFqVW_whashy8di01qX2cWMt=s64","userId":"09774315254356044053"}},"colab":{"base_uri":"https://localhost:8080/","height":139}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n","Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Tnwn7k5Yn-gH","colab_type":"code","colab":{}},"source":["import pandas as pd\n","import numpy as np\n","from sklearn.preprocessing import MinMaxScaler\n","from sklearn.preprocessing import KBinsDiscretizer\n","from sklearn.utils import shuffle\n","import torch\n","from torch import nn\n","device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","# csv_data = np.loadtxt(\"drive/My Drive/rcv1subset1.csv\",delimiter=\",\")\n","# pandas_file=pd.read_csv('drive/My Drive/rcv1subset1/rcv1subset2.csv', sep=',')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"q1gdYsXHrM-m","colab_type":"code","colab":{}},"source":["class CustomDataset(torch.utils.data.Dataset):\n","\n","  def __init__(self, data, index):\n","    data = data.to_numpy()\n","\n","    x_data=data[:, :47236]\n","    self.x_data = torch.from_numpy(x_data.astype('float'))\n","    y_data = data[:, 47236+index]\n","    self.y_data = torch.from_numpy(y_data.astype('int64'))\n","    self.length = len(data)\n","\n","  def __getitem__(self, index):\n","    return self.x_data[index], self.y_data[index]\n","\n","  def __len__(self):\n","    return self.length\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"-ck-uQMU-kQa","colab_type":"code","colab":{}},"source":["# [32, 33, 70, 69, 4, 98, 59, 3, 97, 58]\n","train_data = pd.read_csv('drive/My Drive/rcv1subset1-train.csv', sep=',')\n","test_data=pd.read_csv('drive/My Drive/rcv1subset2-test.csv',sep=',')\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZauqhpZr8jyL","colab_type":"code","colab":{}},"source":["# [32, 33, 70, 69, 4, 98, 59, 3, 97, 58]\n","\n","train_dataset = CustomDataset(train_data, 3)\n","test_dataset = CustomDataset(test_data, 3)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"zyKJ2JcxP56R","colab_type":"code","colab":{}},"source":["\n","\n","\n","\n","input_size = 47236\n","num_classes = 2\n","batch_size = 256\n","learning_rate = 0.001\n","\n","\n","train_loader = torch.utils.data.DataLoader(dataset = train_dataset,\n","                                            batch_size = batch_size,\n","                                            shuffle = True)\n","\n","test_loader = torch.utils.data.DataLoader(dataset = test_dataset,\n","                                           batch_size = batch_size,\n","                                           shuffle = False)\n","\n","# Device configuration\n","device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","\n","# Fully connected neural network with one hidden layer\n","class FFNet(nn.Module):\n","  def __init__(self, input_size, num_classes):\n","    super(FFNet, self).__init__()\n","    self.net =nn.Sequential(\n","          nn.Linear(input_size, 1024),\n","          nn.ReLU(),\n","          nn.Dropout(p=0.5),\n","        \n","          nn.Linear(1024, 128),\n","          nn.ReLU(),\n","          nn.Dropout(p=0.5),\n","        \n","          nn.Linear(128, num_classes)\n","        ) \n","  def forward(self, x):\n","    out = self.net(x)\n","    return out\n","\n","def train_ffnet(model, train_loader, num_epochs):\n","  model.train()\n","  total_step = len(train_loader)\n","  for epoch in range(num_epochs):\n","    for i, (features, labels) in enumerate(train_loader):\n","      optimizer.zero_grad()\n","      \n","      features = features.float().to(device)\n","      labels = labels.long().to(device)\n","      outputs = model(features)\n","      loss = criterion(outputs, labels)\n","\n","      loss.backward()\n","      optimizer.step()\n","\n","      if(i+1) % 300 == 0:\n","        print('Epoch [{}/{}], Step [{}/{}], Loss: {:.4f}'.format(epoch+1, num_epochs, i+1, total_step, loss.item()))\n","        \n","def test_ffnet(model, test_loader):\n","  model.eval()\n","  with torch.no_grad():\n","    correct=0\n","    total =0\n","    for features, labels in test_loader:\n","      features = features.float().to(device)\n","      labels = labels.float().to(device)\n","      outputs = model(features)\n","      _, predicted = torch.max(outputs.data, 1)\n","      total += labels.size(0)\n","      correct += (predicted == (labels)).sum().item()\n","    print('Accuracy of the network on the 1000 test inputs: {}%'.format(100*correct/total))\n","\n","\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ORKY1hL2D6dQ","colab_type":"code","outputId":"7005e307-f582-430d-e46c-701ac32fc3d3","executionInfo":{"status":"ok","timestamp":1579657996438,"user_tz":-540,"elapsed":683089,"user":{"displayName":"이고은학부생","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mD7Hhpz51CZiAt-pFqVW_whashy8di01qX2cWMt=s64","userId":"09774315254356044053"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":[" model = FFNet(input_size, num_classes).to(device)\n","\n","# Set the loss and optimizer\n","criterion = nn.CrossEntropyLoss()\n","optimizer = torch.optim.Adam(model.parameters(), lr = learning_rate)\n","\n","train_ffnet(model, train_loader, num_epochs = 300)\n","test_ffnet(model, test_loader)\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Accuracy of the network on the 1000 test inputs: 83.56666666666666%\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"8sxYpArArY_i","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}